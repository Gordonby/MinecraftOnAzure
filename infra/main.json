{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.12.40.16777",
      "templateHash": "4231669026819394928"
    }
  },
  "parameters": {
    "nameseed": {
      "type": "string",
      "defaultValue": "minecraft8"
    },
    "createAcr": {
      "type": "bool",
      "defaultValue": false
    },
    "existingContainerRegistryName": {
      "type": "string",
      "defaultValue": ""
    },
    "existingContainerRegistryGroup": {
      "type": "string",
      "defaultValue": ""
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "imageName": {
      "type": "string",
      "defaultValue": "docker.io/itzg/minecraft-bedrock-server:latest"
    },
    "storageShareName": {
      "type": "string",
      "defaultValue": "myworld"
    },
    "uniqueSuffix": {
      "type": "string",
      "defaultValue": "[uniqueString(resourceGroup().id, deployment().name)]"
    }
  },
  "resources": [
    {
      "condition": "[parameters('createAcr')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2022-02-01-preview",
      "name": "[format('cr{0}{1}', parameters('nameseed'), parameters('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": false
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-storage', deployment().name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "nameseed": {
            "value": "[parameters('nameseed')]"
          },
          "storageShareName": {
            "value": "[parameters('storageShareName')]"
          },
          "uniqueSuffix": {
            "value": "[parameters('uniqueSuffix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.12.40.16777",
              "templateHash": "2674700148579200879"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "nameseed": {
              "type": "string"
            },
            "storageShareName": {
              "type": "string"
            },
            "storageDeleteRetentionDays": {
              "type": "int",
              "defaultValue": 14
            },
            "backupEnabled": {
              "type": "bool",
              "defaultValue": true
            },
            "today": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddTHHmmssZ')]",
              "metadata": {
                "description": "Used to reference todays date"
              }
            },
            "uniqueSuffix": {
              "type": "string",
              "defaultValue": "[uniqueString(resourceGroup().id, deployment().name)]"
            }
          },
          "variables": {
            "storageName": "[take(format('st{0}{1}', toLower(parameters('nameseed')), parameters('uniqueSuffix')), 24)]",
            "tomorrow": "[dateTimeAdd(parameters('today'), 'P1D', 'yyyy-MM-dd')]",
            "backupTime": "[format('{0}T03:00:00+00:00', take(variables('tomorrow'), 10))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}/{2}', variables('storageName'), 'default', parameters('storageShareName'))]",
              "properties": {
                "accessTier": "TransactionOptimized"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', variables('storageName'), 'default')]",
              "properties": {
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": "[parameters('storageDeleteRetentionDays')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[variables('storageName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_GRS"
              },
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true
              }
            },
            {
              "condition": "[parameters('backupEnabled')]",
              "type": "Microsoft.RecoveryServices/vaults",
              "apiVersion": "2022-09-30-preview",
              "name": "[format('bkp-{0}', parameters('nameseed'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "RS0",
                "tier": "Standard"
              },
              "properties": {
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "condition": "[parameters('backupEnabled')]",
              "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
              "apiVersion": "2022-09-01-preview",
              "name": "[format('{0}/{1}', format('bkp-{0}', parameters('nameseed')), 'DailyPolicy')]",
              "properties": {
                "workLoadType": "AzureFileShare",
                "backupManagementType": "AzureStorage",
                "schedulePolicy": {
                  "schedulePolicyType": "SimpleSchedulePolicy",
                  "scheduleRunFrequency": "Daily",
                  "scheduleRunTimes": [
                    "[variables('backupTime')]"
                  ],
                  "scheduleWeeklyFrequency": 0
                },
                "retentionPolicy": {
                  "retentionPolicyType": "LongTermRetentionPolicy",
                  "dailySchedule": {
                    "retentionDuration": {
                      "count": "[mul(parameters('storageDeleteRetentionDays'), 2)]",
                      "durationType": "Days"
                    },
                    "retentionTimes": [
                      "[variables('backupTime')]"
                    ]
                  },
                  "weeklySchedule": null,
                  "monthlySchedule": null,
                  "yearlySchedule": null
                },
                "timeZone": "UTC"
              },
              "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults', format('bkp-{0}', parameters('nameseed')))]"
              ]
            },
            {
              "condition": "[parameters('backupEnabled')]",
              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
              "apiVersion": "2022-09-01-preview",
              "name": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}', format('bkp-{0}', parameters('nameseed')), resourceGroup().name, variables('storageName'))]",
              "properties": {
                "backupManagementType": "AzureStorage",
                "containerType": "StorageContainer",
                "sourceResourceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
                "acquireStorageAccountLock": "Acquire"
              },
              "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults', format('bkp-{0}', parameters('nameseed')))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
              ]
            },
            {
              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
              "apiVersion": "2021-12-01",
              "name": "[format('{0}/{1}/{2}/{3}', split(format('{0}/Azure/storagecontainer;Storage;{1};{2}', format('bkp-{0}', parameters('nameseed')), resourceGroup().name, variables('storageName')), '/')[0], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}', format('bkp-{0}', parameters('nameseed')), resourceGroup().name, variables('storageName')), '/')[1], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}', format('bkp-{0}', parameters('nameseed')), resourceGroup().name, variables('storageName')), '/')[2], format('AzureFileShare;{0}', parameters('storageShareName')))]",
              "properties": {
                "protectedItemType": "AzureFileShareProtectedItem",
                "sourceResourceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', format('bkp-{0}', parameters('nameseed')), 'DailyPolicy')]",
                "isInlineInquiry": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', format('bkp-{0}', parameters('nameseed')), 'DailyPolicy')]",
                "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/storagecontainer;Storage;{1};{2}', format('bkp-{0}', parameters('nameseed')), resourceGroup().name, variables('storageName')), '/')[0], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}', format('bkp-{0}', parameters('nameseed')), resourceGroup().name, variables('storageName')), '/')[1], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}', format('bkp-{0}', parameters('nameseed')), resourceGroup().name, variables('storageName')), '/')[2])]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
              ]
            }
          ],
          "outputs": {
            "AccountName": {
              "type": "string",
              "value": "[variables('storageName')]"
            },
            "ShareName": {
              "type": "string",
              "value": "[parameters('storageShareName')]"
            }
          }
        }
      },
      "metadata": {
        "description": "Creates the file share in Azure storage with daily backup"
      }
    },
    {
      "condition": "[or(parameters('createAcr'), and(not(empty(parameters('existingContainerRegistryGroup'))), not(empty(parameters('existingContainerRegistryName')))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-acrImportImage', deployment().name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acrName": {
            "value": "[if(parameters('createAcr'), format('cr{0}{1}', parameters('nameseed'), parameters('uniqueSuffix')), parameters('existingContainerRegistryName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "images": {
            "value": "[array(parameters('imageName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "8432140579349303037"
            }
          },
          "parameters": {
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location to deploy the resources to"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "How the deployment script should be forced to execute"
              }
            },
            "rbacRoleNeeded": {
              "type": "string",
              "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
              "metadata": {
                "description": "Azure RoleId that are required for the DeploymentScript resource to import images"
              }
            },
            "useExistingManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Does the Managed Identity already exists, or should be created"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "defaultValue": "id-ContainerRegistryImport",
              "metadata": {
                "description": "Name of the Managed Identity resource"
              }
            },
            "existingManagedIdentitySubId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "For an existing Managed Identity, the Subscription Id it is located in"
              }
            },
            "existingManagedIdentityResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "For an existing Managed Identity, the Resource Group it is located in"
              }
            },
            "images": {
              "type": "array",
              "metadata": {
                "description": "An array of fully qualified images names to import"
              }
            },
            "initialScriptDelay": {
              "type": "string",
              "defaultValue": "30s",
              "metadata": {
                "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
              }
            },
            "cleanupPreference": {
              "type": "string",
              "defaultValue": "OnSuccess",
              "metadata": {
                "description": "When the script resource is cleaned up"
              },
              "allowedValues": [
                "OnSuccess",
                "OnExpiration",
                "Always"
              ]
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingManagedIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('acrName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
                "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "copy": {
                "name": "createImportImage",
                "count": "[length(parameters('images'))]"
              },
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('ACR-Import-{0}-{1}', parameters('acrName'), last(split(replace(parameters('images')[copyIndex()], ':', ''), '/')))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "forceUpdateTag": "[parameters('forceUpdateTag')]",
                "azCliVersion": "2.30.0",
                "timeout": "PT30M",
                "retentionInterval": "P1D",
                "environmentVariables": [
                  {
                    "name": "acrName",
                    "value": "[parameters('acrName')]"
                  },
                  {
                    "name": "imageName",
                    "value": "[parameters('images')[copyIndex()]]"
                  },
                  {
                    "name": "initialDelay",
                    "value": "[parameters('initialScriptDelay')]"
                  },
                  {
                    "name": "retryMax",
                    "value": "2"
                  },
                  {
                    "name": "retrySleep",
                    "value": "5s"
                  }
                ],
                "scriptContent": "      #!/bin/bash\n      set -e\n\n      echo \"Waiting on RBAC replication ($initialDelay)\"\n      sleep $initialDelay\n      \n      #Retry loop to catch errors (usually RBAC delays, but 'Error copying blobs' is also not unheard of)\n      retryLoopCount=0\n      until [ $retryLoopCount -ge $retryMax ]\n      do\n        echo \"Importing Image: $imageName into ACR: $acrName\"\n        az acr import -n $acrName --source $imageName --force \\\n          && break\n\n        sleep $retrySleep\n        retryLoopCount=$((retryLoopCount+1))\n      done\n\n    ",
                "cleanupPreference": "[parameters('cleanupPreference')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))))]"
              ]
            }
          ],
          "outputs": {
            "importedImages": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('images'))]",
                "input": {
                  "originalImage": "[parameters('images')[copyIndex()]]",
                  "acrHostedImage": "[format('{0}{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), '2021-12-01-preview').loginServer, string(skip(parameters('images')[copyIndex()], indexOf(parameters('images')[copyIndex()], '/'))))]"
                }
              },
              "metadata": {
                "description": "An array of the imported images"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}{1}', parameters('nameseed'), parameters('uniqueSuffix')))]"
      ],
      "metadata": {
        "description": "This module seeds an ACR with the Container image so you are not dependant on an external registry"
      }
    }
  ],
  "outputs": {
    "AcrImage": {
      "type": "string",
      "value": "[if(or(parameters('createAcr'), and(not(empty(parameters('existingContainerRegistryGroup'))), not(empty(parameters('existingContainerRegistryName'))))), first(reference(resourceId('Microsoft.Resources/deployments', format('{0}-acrImportImage', deployment().name)), '2020-10-01').outputs.importedImages.value), '')]"
    },
    "StorageAccountName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storage', deployment().name)), '2020-10-01').outputs.AccountName.value]"
    },
    "StorageShareName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-storage', deployment().name)), '2020-10-01').outputs.ShareName.value]"
    }
  }
}